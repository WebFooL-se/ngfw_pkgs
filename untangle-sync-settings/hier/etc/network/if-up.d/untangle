#!/bin/sh

debug()
{
    /bin/echo -e "[`date`] if-up.d/untangle: ${*}"
}

debug_ip()
{
    debug ip $*
    ip $*
}

debug_run_parts()
{
    debug run-parts $*
    run-parts -v $*
}

networking_pre_restart_hook()
{
    $DEBUG "networking_pre_restart_hook"
    $RUN_PARTS /etc/untangle/pre-network-hook.d
    return 0
}

untangle_v6_config()
{
    if [ -n "${IF_UNTANGLE_V6_ADDRESS}" ] ; then
        if [ "auto" = "${IF_UNTANGLE_V6_ADDRESS}" ] ; then
            # force kernel router solicitation now
            rdisc6 $IFACE
        elif [ -n "${IF_UNTANGLE_V6_PREFIX}" ] ; then
            #$DEBUG ip -6 addr add ${IF_UNTANGLE_V6_ADDRESS}/${IF_UNTANGLE_V6_PREFIX} dev $IFACE
            ip -6 addr add ${IF_UNTANGLE_V6_ADDRESS}/${IF_UNTANGLE_V6_PREFIX} dev $IFACE
        fi
    fi

    if [ -n "$IF_UNTANGLE_V6_GATEWAY" ] && [ -n "$IF_UNTANGLE_INTERFACE_INDEX" ] ; then
        /usr/share/untangle-sync-settings/bin/add-uplink.sh ${IFACE} ${IF_UNTANGLE_V6_GATEWAY} uplink.${IF_UNTANGLE_INTERFACE_INDEX} -6
    fi

    return 0
}

untangle_v4_config()
{
    #$DEBUG "untangle_v4_config: IF_UNTANGLE_V4_ADDRESS = ${IF_UNTANGLE_V4_ADDRESS}"
    #$DEBUG "untangle_v4_config: IF_UNTANGLE_V4_NETMASK = ${IF_UNTANGLE_V4_NETMASK}"
    #$DEBUG "untangle_v4_config: IF_UNTANGLE_V4_GATEWAY = ${IF_UNTANGLE_V4_GATEWAY}"

    if [ -n "${IF_UNTANGLE_V4_ADDRESS}" ] && [ -n "${IF_UNTANGLE_V4_NETMASK}" ]; then
        #$DEBUG ifconfig $IFACE ${IF_UNTANGLE_V4_ADDRESS} netmask ${IF_UNTANGLE_V4_NETMASK} up
        ifconfig $IFACE ${IF_UNTANGLE_V4_ADDRESS} netmask ${IF_UNTANGLE_V4_NETMASK} up
    fi

    if [ -n "$IF_UNTANGLE_V4_GATEWAY" ] && [ -n "$IF_UNTANGLE_INTERFACE_INDEX" ] ; then
        /usr/share/untangle-sync-settings/bin/add-uplink.sh ${IFACE} ${IF_UNTANGLE_V4_GATEWAY} uplink.${IF_UNTANGLE_INTERFACE_INDEX} -4
    fi

    # add a source route so any traffic from this address goes out correct WAN (if it goes out a WAN)
    if [ -n "${IF_UNTANGLE_V4_ADDRESS}" ] && [ -n "$IF_UNTANGLE_INTERFACE_INDEX" ] ; then
        # If uplink.X exists (this must be a WAN)
        ip route show table uplink.${IF_UNTANGLE_INTERFACE_INDEX} >/dev/null 2>&1
        if [ $? -eq 0 ] ; then
            /usr/share/untangle-sync-settings/bin/add-source-route.sh ${IF_UNTANGLE_V4_ADDRESS} uplink.${IF_UNTANGLE_INTERFACE_INDEX} -4
        fi
    fi

    return 0
}

networking_post_restart_hook()
{
    $DEBUG "networking_post_restart_hook"
    $RUN_PARTS /etc/untangle/post-network-hook.d
    return 0
}

write_status_file()
{
    local t_interface="$1"
    local t_index="$2"
    ( [ -z "$t_interface" ] || [ -z "$t_index" ] ) && {
        return 0
    }

    $DEBUG "writing /var/lib/interface-status/interface-${t_interface}-status.js"
    /usr/share/untangle-sync-settings/bin/write-interface-status.py -I ${t_interface} -i ${t_index} -w /var/lib/interface-status/interface-${t_interface}-status.js

    # Only write the index status file if this is not an alias
    echo "${t_interface}" | grep -q ":"
    if [ ! $? -eq 0 ] ; then
        $DEBUG "writing /var/lib/interface-status/interface-${t_index}-status.js"
        /usr/share/untangle-sync-settings/bin/write-interface-status.py -I ${t_interface} -i ${t_index} -w /var/lib/interface-status/interface-${t_index}-status.js
    fi
}

## Start of script

#DEBUG=/bin/true
#IP="ip"
#RUN_PARTS="run-parts"

DEBUG="debug"
IP="debug_ip"
RUN_PARTS="debug_run_parts"

$DEBUG "if-up.d start [$IFACE]"

if [ "$IFACE" = "networking_pre_restart_hook" ] ; then
    networking_pre_restart_hook
    $DEBUG "if-up.d end   [$IFACE]"
    exit 0
fi

if [ "$IFACE" = "networking_post_restart_hook" ] ; then
    networking_post_restart_hook
    $DEBUG "if-up.d end   [$IFACE]"
    exit 0
fi

untangle_v4_config

untangle_v6_config

write_status_file $IFACE $IF_UNTANGLE_INTERFACE_INDEX

$DEBUG "if-up.d end   [$IFACE]"

## always exit 0
exit 0
