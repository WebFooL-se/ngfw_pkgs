#!/bin/bash

# we don't deal with grub on arm* at all
uname -m | grep -qE '^arm' && exit 0

if [ "$1" = "configure" ] ; then
  # oldVersion will be non-empty if untangle-linux-config has been
  # configured before
  oldVersion="$2" 
fi

grabRootDevice() {
  awk '/^[^#].*[ \t]+\/[ \t]+ext/ {print $1}' $1
}
 
kernelRoot=$(perl -ne 'print $1 if m|root=([^\s]+)|' /proc/cmdline)

if [ -n "$kernelRoot" ]; then
  # regular boot; the system apparently was fine with whatever got
  # passed to the kernel by grub, so we'll use that too
  root=$kernelRoot
elif [ -f /etc/mtab ]; then
  root=$(grabRootDevice /etc/mtab)
fi

# If we couldn't find a root, don't bother with the rest as we must
# be in some fake install time.
[ -z "$root" ] && exit 0

case "$root" in
  /dev/*) # let's get a UUID for this device
    rootdev=$(blkid $root | awk '{gsub(/"/, "", $2) ; print $2}') ;;
  *) # fallback: we already have a UUID
    rootdev="$root" ;;
esac

# rewrite fstab
echo "Forcing / in fstab to map to current root device ($rootdev)"
perl -i -pe 's|^[^\s#]+(\s+/\s+)|'$rootdev'$1|' /etc/fstab

currentDefault=$(grub-editenv list | awk -F= '/^saved_entry/ {print $2}')
rm -f /etc/grub.d/10_linux # we use our own 50_custom instead
cp -f /usr/share/untangle-linux-config/grub-default /etc/default/grub

if [ -z "$currentDefault" ] || [ "$currentDefault" = "default" ] ; then
  echo "Setting default grub option: 0"
  /usr/sbin/grub-set-default 0
fi

# FIXME: decide what kernel to use upon upgrading from wheezy to jessie
# Reset default (not necessary now, necessary when upgrading kernel)
# currentKernelParams="$(grep -E '^kernel' $menuLst | head -$((1 + $currentDefault)) | tail -1)"
# case "$currentKernelParams" in
#   *force-video-safe*|"") newDefault=1 ;;
#   *noapic*) newDefault=3 ;;
#   *) newDefault=0 ;;
# esac
# /usr/sbin/grub-set-default $newDefault

# install new grub on update; can't re-use the above UUID=... as
# grub-install doesn't understand that
echo "Configuring grub2..."
if [ -f /boot/grub/device.map ] ; then
  echo "  * Checking in /boot/grub/device.map"
  hd0=$(awk '/hd0/ { print $2 }' /boot/grub/device.map)
  echo "  * found hd0 on '${hd0}'"
  hd0Target=$(readlink -f ${hd0})
  echo "  * target '${hd0Target}'"
fi
if [ ! -e "$hd0Target" ] ; then
  echo "  * No target found in /boot/grub/device.map. Using /"
  root=$(grabRootDevice /etc/mtab)
  rootTarget=$(readlink -f ${root})
  echo "  * / is on '${root}', which links to '${rootTarget}'"
  hd0Target=$(echo $rootTarget | perl -pe 's/\d$//')
  echo "  * target '${hd0Target}'"
fi

echo "Installing grub2... \"${hd0Target}\""

if [ ! -z "${hd0Target}" ] ; then
    /usr/sbin/grub-install $hd0Target
fi

# update config
echo "Updating grub2..."
/usr/sbin/update-grub

if [ ! -f /etc/ssl/certs/java/cacerts ] ; then
    echo "Creating default /etc/ssl/certs/java/cacerts file..."
    cp -f /usr/share/untangle-linux-config/default-java-cacerts /etc/ssl/certs/java/cacerts
fi

# enable serial console
systemctl enable serial-getty@ttyS0.service
systemctl start serial-getty@ttyS0.service

# enable textui on serial console for zsh or bash shell when root logs in
if ! grep -q ttyS0 /root/.zshrc ; then
    echo 'if [ `tty` = "/dev/ttyS0" ] ; then read ; /usr/share/untangle/bin/ut-textui.py ; fi' >> /root/.zshrc
else
    sed -e 's|.*ttyS0.*|if [ `tty` = "/dev/ttyS0" ] ; then read ; /usr/share/untangle/bin/ut-textui.py ; fi|' -i /root/.zshrc
fi
if ! grep -q ttyS0 /root/.bashrc ; then
    echo 'if [ `tty` = "/dev/ttyS0" ] ; then read ; /usr/share/untangle/bin/ut-textui.py ; fi' >> /root/.bashrc
else
    sed -e 's|.*ttyS0.*|if [ `tty` = "/dev/ttyS0" ] ; then read ; /usr/share/untangle/bin/ut-textui.py ; fi|' -i /root/.bashrc
fi

# 14.0.0 upgrade fix
# overwrite shitty miniupnp scripts
echo -e '#!/bin/sh\nexit 0\n' > /etc/miniupnpd/iptables_init.sh
echo -e '#!/bin/sh\nexit 0\n' > /etc/miniupnpd/ip6tables_init.sh

exit 0
